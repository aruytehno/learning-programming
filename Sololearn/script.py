def test_example():
    list_example = ["one", "two"]
    dict_example = {1: 1, 2: 1, 3: 2, 4: 3}
    tuple_example = ("spam", "eggs", "sausages")
    print(type(list_example))
    print(type(dict_example))
    print(type(tuple_example))


def test_example2():
    tuple_example = (1, (1, 2, 3))
    print(tuple_example[1])


def test_tuple_extracted():
    x, y = [1, 2]

    x, y = y, x
    print(x, y)

    a, b, c, d, *e, f, g = range(20)
    print(len(e))


def test_code_2():
    letters = {"a", "b", "c", "d"}
    if "e" not in letters:
        print(1)
    else:
        print(2)

'''
Множества
Вы можете использовать функцию add(), чтобы добавить новые элементы во множество, 
и remove(), чтобы удалить определенный элемент.

Множества можно комбинировать с помощью математических операций.
Оператор объединения | комбинирует два множества в новое, которое содержит элементы из обоих множеств.
Оператор пересечения & получает элементы, которые являются общими для обоих множеств.
Оператор разности – получает элементы, которые присутствуют в первом множестве, но не во втором.
Оператор симметричной разницы ^ получает элементы, которые находятся в одном из множеств, но не в обоих.
'''


def test_code_3():
    a = {1, 2, 3}
    b = {0, 3, 4, 5}
    print(a & b)

'''
Списковые включения являются полезным способом быстрого создания списков, содержимое которых подчиняется определенному правилу.
Например, можно сделать следующее:
'''


# Создайте список чисел, кратных 3, от 0 до 20.
def test_code_4():
    print([i * 2 for i in range(10)])
    print([i for i in range(20) if i%3 == 0])


'''
Структуры данных
Как мы увидели в предыдущих уроках, Python поддерживает следующие типы коллекций: Списки, Словари, Кортежи, Множества.

Когда использовать словарь:

Когда вам нужна логическая связь между парой ключ:значение.
Когда вам нужен быстрый поиск ваших данных на основе задаваемого ключа.
Когда ваши данные постоянно меняются. Помните, словари являются мутабельными.
Когда использовать другие типы:

Используйте списки, если у вас есть коллекция данных, к которой не нужен случайный доступ. Попробуйте списки, когда вам нужна простая, итерируемая коллекция, которая часто изменяется.
Используйте множество, если вам нужна уникальность элементов.
Используйте кортежи, когда ваши данные не могут/не должны изменяться.
'''


def test_code_5():
    nums = (55, 44, 33, 22)
    print(nums[:2][-1])
    print([x*10 for x in range (5, 10)])
